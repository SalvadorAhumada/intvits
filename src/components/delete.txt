        <Dropdown
          options={options}
          onChange={setNewFilter}
          value={filterName || defaultOption}
        />
        
        import React, { Fragment, useState } from 'react';
import "./styles.css";
import Navbar from "./components/Navbar";
import ivits from "./components/storage/intervits";
import topics from "./components/storage/topics";
import Dropdown from "react-dropdown";
import "react-dropdown/style.css";
import { Animated } from "react-animated-css";
import Ivit from "./components/Ivit";
import { Cancel } from "@material-ui/icons";

// Types & Interfaces
type formElement = React.FormEvent<HTMLFormElement>

interface ITask {
  name:string,
  done:boolean
}

function App(): JSX.Element {

  const [newTask, setNewTask] = useState<string>("");
  const [tasks, setTasks] = useState<ITask[]>([]);

  const handleSubmit = (e:formElement) => {
    e.preventDefault();
    addTask(newTask);
    setNewTask("");
  }

  const addTask = (name:string): void => {
    const newTask: ITask[] = [...tasks, {name, done:false}];
    setTasks(newTask);
  }

  const toggleStatus = (i:number): void => {
    const newTasks:ITask[] = [...tasks]
    newTasks[i].done = !newTasks[i].done;
    setTasks(newTasks);
  }

  const deleteToDo = (i:number): void => {
    const newTasks:ITask[] = [...tasks];
    newTasks.splice(i,1);
    setTasks(newTasks);
  };

const allTasks = tasks.map((task: ITask, index:number) => (
  <div key={index}>
    <p style={{textDecoration:task.done ? "line-through" : ""}}>{task.name}</p>
    <button onClick={() => toggleStatus(index)}>{task.done ? "undone" : "done"}</button>
    <button onClick={() => deleteToDo(index)}>Eliminar</button>
  </div>
));

  return (
    <div className="App">
      <h1>Type-to-do</h1>
      <Fragment>
        <form onSubmit={handleSubmit}>
          <input type="text" onChange={e => setNewTask(e.target.value)} value={newTask}/>
          <button>Guardar</button>
        </form>
      </Fragment>
      {allTasks}
    </div>
  );
}

export default App;
